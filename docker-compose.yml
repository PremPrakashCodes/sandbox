services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: sandbox-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-sandbox}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sandbox}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sandbox-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Cache
  redis:
    image: redis:7-alpine
    container_name: sandbox-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sandbox-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: production
    container_name: sandbox-backend
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/sandbox}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - DEBUG=${DEBUG:-false}
      - HOST=${BACKEND_HOST:-0.0.0.0}
      - PORT=${BACKEND_PORT:-8000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sandbox-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Frontend
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: production
      args:
        - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8000}
    container_name: sandbox-frontend
    restart: unless-stopped
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - sandbox-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache

  # Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: sandbox-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - sandbox-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    security_opt:
      - no-new-privileges:true
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: sandbox-certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    networks:
      - sandbox-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local

networks:
  sandbox-network:
    driver: bridge
